---

# Creates our cluster on OpenStack.
#
# This is driven by variables that should be defined by
# 'sourcing' your OpenStack Keystone file. The initial
# 'assert' checks that these variables are set.

- name: Assert cloud variables
  assert:
    that:
    - os_auth_url is defined
    - worker_count > 0

- name: Assert head address
  assert:
    that:
    - head_address|ipaddr
  when: head_address|length > 0

- name: Check private key-pair (id_rsa)
  stat:
    path: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa"
  register: priv_key

- name: Check public key-pair (id_rsa.pub)
  stat:
    path: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa.pub"
  register: pub_key

- name: Assert key-pair exists
  assert:
    that:
    - priv_key.stat.exists
    - pub_key.stat.exists

- name: Install public key (id_rsa.pub)
  os_keypair:
    auth: "{{ os_auth }}"
    name: "{{ instance_base_name }}-key"
    public_key_file: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa.pub"
    region_name: "{{ os_region_name }}"

- name: Create shared volume
  os_volume:
    auth: "{{ os_auth }}"
    size: "{{ volume_size_g }}"
    display_name: "{{ instance_base_name }}-volume"
    display_description: Shared volume for the Fragment cluster

# Create the head node but allow for failure.
# We give up if, after 5 attempts, we cannot create the instance.

- name: Display head node flavour
  debug:
    var: head_type

- name: Create head node (with IP)
  script: >-
    create-os-server.py --name {{ instance_base_name }}-head
    --flavour {{ head_type }}
    --image {{ head_image_name }}
    --keypair {{ instance_base_name }}-key
    --network {{ instance_network }}
    --ips {{ head_address }}
    --verbose
  environment:
    OS_AUTH_URL: "{{ os_auth_url }}"
    OS_PROJECT_ID: "{{ os_project_id }}"
    OS_USERNAME: "{{ os_username }}"
    OS_PASSWORD: "{{ os_password }}"
    OS_USER_DOMAIN_NAME: "{{ os_user_domain_name }}"
    OS_REGION_NAME: "{{ os_region_name }}"
  register: head
  changed_when: '"Cloud changed: True" in head.stdout'
  when: head_addr|length > 0

- name: Create head node (without IP)
  script: >-
    create-os-server.py --name {{ instance_base_name }}-head
    --flavour {{ head_type }}
    --image {{ head_image_name }}
    --keypair {{ instance_base_name }}-key
    --network {{ instance_network }}
    --verbose
  environment:
    OS_AUTH_URL: "{{ os_auth_url }}"
    OS_PROJECT_ID: "{{ os_project_id }}"
    OS_USERNAME: "{{ os_username }}"
    OS_PASSWORD: "{{ os_password }}"
    OS_USER_DOMAIN_NAME: "{{ os_user_domain_name }}"
    OS_REGION_NAME: "{{ os_region_name }}"
  register: head
  changed_when: '"Cloud changed: True" in head.stdout'
  when: head_addr|length == 0

- name: Display 'create head node' output
  debug:
    msg: "{{ item }}"
  loop: "{{ head.stdout_lines }}"

- name: Attach the shared volume to the head node
  os_server_volume:
    auth: "{{ os_auth }}"
    device: "{{ volume_device }}"
    server: "{{ instance_base_name }}-head"
    volume: "{{ instance_base_name }}-volume"

# Create the worker nodes but, as before, we allow for failure.
# We give up if, after 5 attempts, we cannot create an instance.

- name: Display worker node flavour
  debug:
    var: worker_type

- name: Create worker nodes (batch)
  script: >-
    create-os-server.py --name {{ instance_base_name }}-worker
    --flavour {{ worker_type }}
    --image {{ worker_image_name }}
    --keypair {{ instance_base_name }}-key
    --network {{ instance_network }}
    --wait-time {{ os_server_wait_time_s }}
    --count {{ worker_count }}
    --verbose
  environment:
    OS_AUTH_URL: "{{ os_auth_url }}"
    OS_PROJECT_ID: "{{ os_project_id }}"
    OS_USERNAME: "{{ os_username }}"
    OS_PASSWORD: "{{ os_password }}"
    OS_USER_DOMAIN_NAME: "{{ os_user_domain_name }}"
    OS_REGION_NAME: "{{ os_region_name }}"
  register: workers
  changed_when: "'Cloud changed: True' in workers.stdout"

- name: Display 'create worker nodes' output
  debug:
    msg: "{{ item }}"
  loop: "{{ workers.stdout_lines }}"
